<?xml version="1.0" encoding="UTF-8"?>
<!-- 
POM Maven pour le projet Visualpathit VProfile.
Définit les métadonnées, dépendances, et plugins du projet.
Ce fichier explique comment Maven va construire, tester et packager l'application.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

    <!-- Version du modèle POM -->
    <modelVersion>4.0.0</modelVersion>

    <!-- Informations principales du projet -->
    <groupId>com.visualpathit</groupId> <!-- Identifiant du groupe (souvent domaine inversé) -->
    <artifactId>vprofile</artifactId>    <!-- Nom de l'artifact -->
    <packaging>war</packaging>           <!-- Type de packaging généré : WAR (application web) -->
    <version>v2</version>                <!-- Version du projet -->
    <name>Visualpathit VProfile Webapp</name> <!-- Nom du projet -->
    <url>http://maven.apache.org</url>         <!-- URL du projet -->

    <!-- Propriétés du projet : centralisation des versions -->
    <properties>
        <!-- Versions des dépendances -->
        <spring.version>6.0.11</spring.version>
        <spring-boot.version>3.1.3</spring-boot.version>
        <spring-security.version>6.1.2</spring-security.version>
        <spring-data-jpa.version>3.1.2</spring-data-jpa.version>
        <hibernate.version>7.0.0.Alpha3</hibernate.version>
        <hibernate-validator.version>6.2.0.Final</hibernate-validator.version>
        <mysql-connector.version>8.0.33</mysql-connector.version>
        <commons-dbcp.version>2.12.0</commons-dbcp.version>

        <!-- Versions des tests et logs -->
        <junit.version>4.13.2</junit.version>
        <logback.version>1.5.6</logback.version>

        <!-- Version Java du compilateur -->
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
    </properties>

    <!-- Dépendances du projet -->
    <dependencies>

        <!-- SPRING : Web MVC, Contexte, ORM, Transactions -->
        <!-- Fournit l'architecture web MVC, le conteneur d'injection, ORM et gestion de transactions -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-orm</artifactId>
            <version>${spring.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-tx</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- SPRING SECURITY -->
        <!-- Gestion de l'authentification et de l'autorisation -->
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring-security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring-security.version}</version>
        </dependency>

        <!-- SPRING DATA JPA et HIBERNATE -->
        <!-- Accès aux données et mapping objet-relationnel -->
        <dependency>
            <groupId>org.springframework.data</groupId>
            <artifactId>spring-data-jpa</artifactId>
            <version>${spring-data-jpa.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
            <version>${hibernate-validator.version}</version>
        </dependency>
        <dependency>
            <groupId>org.hibernate.orm</groupId>
            <artifactId>hibernate-core</artifactId>
            <version>${hibernate.version}</version>
        </dependency>

        <!-- ELASTICSEARCH (Recherche avancée) -->
        <!-- Permet de connecter l'application à Elasticsearch -->
        <dependency>
            <groupId>org.elasticsearch.client</groupId>
            <artifactId>elasticsearch-rest-high-level-client</artifactId>
            <version>7.10.2</version>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch</groupId>
            <artifactId>elasticsearch</artifactId>
            <version>7.10.2</version>
        </dependency>
        <dependency>
            <groupId>org.elasticsearch.plugin</groupId>
            <artifactId>aggs-matrix-stats-client</artifactId>
            <version>7.10.2</version>
        </dependency>

        <!-- RABBITMQ (messagerie) -->
        <!-- Permet d'envoyer et recevoir des messages asynchrones -->
        <dependency>
            <groupId>org.springframework.amqp</groupId>
            <artifactId>spring-rabbit</artifactId>
            <version>3.1.6</version>
        </dependency>
        <dependency>
            <groupId>com.rabbitmq</groupId>
            <artifactId>amqp-client</artifactId>
            <version>5.21.0</version>
        </dependency>

        <!-- MEMCACHED (cache distribué) -->
        <!-- Client pour Memcached, système de cache en mémoire distribué -->
        <dependency>
            <groupId>net.spy</groupId>
            <artifactId>spymemcached</artifactId>
            <version>2.12.3</version>
        </dependency>

        <!-- MySQL DRIVER -->
        <!-- Connecteur JDBC pour la base de données MySQL -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql-connector.version}</version>
        </dependency>

        <!-- Jakarta EE API (Servlet, JSP, JPA) -->
        <!-- Permet de compiler avec les API Jakarta sans embarquer l'implémentation -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.1.0</version>
            <scope>provided</scope> <!-- Scope provided car l'implémentation est fournie par le serveur d'applications -->
        </dependency>
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>3.2.0</version>
        </dependency>
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-api</artifactId>
            <version>10.0.0</version>
            <scope>provided</scope> <!-- Scope provided car l'implémentation est fournie par le serveur d'applications -->
        </dependency>

        <!-- Tests unitaires et d'intégration -->
        <!-- Librairies de tests : Spring Test, JUnit, Mockito, Hamcrest -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot.version}</version>
            <scope>test</scope> <!-- Scope test car uniquement utilisé pendant les tests -->
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>5.5.0</version>
            <scope>test</scope> <!-- Framework de mocking pour les tests -->
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-junit-jupiter</artifactId>
            <version>5.5.0</version>
            <scope>test</scope> <!-- Intégration de Mockito avec JUnit 5 -->
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope> <!-- JUnit 4 pour la rétrocompatibilité -->
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.10.0</version>
            <scope>test</scope> <!-- Moteur d'exécution JUnit 5 -->
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <version>5.10.0</version>
            <scope>test</scope> <!-- API JUnit 5 pour les tests modernes -->
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
            <scope>test</scope> <!-- Support des tests d'intégration Spring -->
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <version>1.3</version>
            <scope>test</scope> <!-- Librairie de matchers pour des assertions plus expressives -->
        </dependency>

        <!-- Logging : Logback et Log4j -->
        <!-- Gestion des logs et compatibilité SLF4J -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.23.1</version> <!-- API Log4j 2 -->
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.20.0</version> <!-- Implémentation centrale de Log4j 2 -->
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.20.0</version> <!-- Bridge Log4j vers SLF4J -->
        </dependency>

        <!-- Upload de fichiers et utilitaires IO -->
        <dependency>
            <groupId>commons-fileupload</groupId>
            <artifactId>commons-fileupload</artifactId>
            <version>1.4</version> <!-- Gestion de l'upload de fichiers -->
        </dependency>
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>2.11.0</version> <!-- Utilitaires d'I/O -->
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.12.0</version> <!-- Pool de connexions base de données -->
        </dependency>

        <!-- Jackson pour JSON -->
        <!-- Traitement des données JSON (sérialisation/désérialisation) -->
        <dependency>
            <groupId>com.fasterxml.jackson.core</groupId>
            <artifactId>jackson-databind</artifactId>
            <version>2.13.0</version>
        </dependency>

        <!-- Spring Messaging -->
        <!-- Support de la programmation messagerie (messages asynchrones) -->
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-messaging</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- JSP / JSTL pour les pages web -->
        <!-- Standard Tag Library pour JavaServer Pages -->
        <dependency>
            <groupId>jakarta.servlet.jsp.jstl</groupId>
            <artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
            <version>2.0.0</version>
        </dependency>
        <dependency>
            <groupId>org.glassfish.web</groupId>
            <artifactId>jakarta.servlet.jsp.jstl</artifactId>
            <version>2.0.0</version> <!-- Implémentation de JSTL -->
        </dependency>

    </dependencies>

    <!-- Configuration du build et des plugins Maven -->
    <build>
        <plugins>

            <!-- Jetty Maven Plugin : permet de lancer l'application dans un serveur Jetty intégré -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>11.0.15</version>
                <configuration>
                    <webApp>
                        <contextPath>/</contextPath> <!-- Définit le contexte racine pour l'application -->
                    </webApp>
                </configuration>
            </plugin>

            <!-- Maven War Plugin : génère un fichier WAR pour le déploiement -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.4.0</version>
                <!-- Configuration possible pour exclure/include des ressources spécifiques -->
            </plugin>

            <!-- JaCoCo : plugin de couverture de code -->
            <!-- Génère des rapports sur la couverture de code par les tests -->
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.9</version>
                <executions>
                    <!-- Prépare l'agent JaCoCo avant les tests -->
                    <execution>
                        <id>jacoco-initialize</id>
                        <phase>process-resources</phase> <!-- Phase du cycle de vie Maven -->
                        <goals>
                            <goal>prepare-agent</goal> <!-- Prépare l'agent pour collecter les données de couverture -->
                        </goals>
                    </execution>
                    <!-- Génère le rapport de couverture après les tests -->
                    <execution>
                        <id>jacoco-site</id>
                        <phase>post-integration-test</phase> <!-- Phase après les tests d'intégration -->
                        <goals>
                            <goal>report</goal> <!-- Génère le rapport HTML de couverture de code -->
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <!-- 
            JaCoCo Plugin (version alternative) 
            Bloc commenté, laissé à titre d'exemple si besoin de version plus récente.
            <plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.8.10</version>
                <executions>
                    <execution>
                        <id>jacoco-initialize</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>jacoco-site</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            -->

        </plugins>
    </build>

</project>